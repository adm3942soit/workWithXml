package de.softconex.assessment.calcmodel.dto;

import de.softconex.assessment.calcmodel.CalculationModelDetailList;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import javax.validation.constraints.NotNull;
import java.math.BigDecimal;
import java.util.Objects;

import static de.softconex.assessment.calcmodel.conversion.XMLConversionInterface.xmlConverter;
import static de.softconex.assessment.calcmodel.utils.ValidationUtil.NULL_STR;
import static de.softconex.assessment.calcmodel.utils.ValidationUtil.WRONG_CONSTRUCTOR_ARGUMENT;

public class CalculationModel {
    public static final String CALCULATION_MODEL = "calculationModel";
    public static final String FIRST_PERCENT = "firstPercent";

    private CalculationModelDetail calculationModelDetail;
    private boolean firstPerCent;

    public CalculationModel(BigDecimal perCent, Price absolute, PriceRange priceRange) {
        this.calculationModelDetail = new CalculationModelDetail(perCent, absolute, priceRange);
        this.firstPerCent = false;
    }

    public CalculationModel() {
        this.calculationModelDetail = new CalculationModelDetail();
        this.firstPerCent = false;
    }


    /**
     * set calculationModel
     */
/*
    public void setCalculationModelDetailList(CalculationModelDetailList calculationModelDetailList) {
        this.setCalculationModelDetailList(calculationModelDetailList);
    }
*/

    public CalculationModelDetail getCalculationModelDetail() {
        return this.calculationModelDetail;
    }

    public boolean isFirstPerCent() {
        return this.firstPerCent;
    }

    public void setFirstPerCent(boolean firstPerCent) {
        this.firstPerCent = firstPerCent;
    }

    @SuppressWarnings({"unused"})
    public static Price calculate(@NotNull Price price, @NotNull CalculationModel calculationModel, boolean firstPerCent) {
        CalculationModelDetail detail = calculationModel.getCalculationModelDetail();
        if (detail == null) {
            throw new IllegalArgumentException("Not given details for calculation!");
        }
        return CalculationModelDetail.calculate(price, detail, calculationModel.firstPerCent);
    }

    public final Price calculate(@NotNull Price price) {

        if (this.getCalculationModelDetail() == null) {
            throw new IllegalArgumentException("Not given details for calculation!");
        }
        return CalculationModelDetail.calculate(price, this.getCalculationModelDetail(), this.isFirstPerCent());
    }

    public static Element toXml(@NotNull CalculationModel calculationModel) {
        Document document = DocumentHelper.createDocument();

        Element root = xmlConverter.createRootElement(document, CALCULATION_MODEL);
        addFirstPercentElement(root, calculationModel);
        addCalculationDetailsElement(root, calculationModel);
        xmlConverter.printResults(root);
        return root;
    }

    public static void addFirstPercentElement(@NotNull Element root, @NotNull CalculationModel calculationModel) {
        if (root.getName() == null) {
            throw new IllegalArgumentException(WRONG_CONSTRUCTOR_ARGUMENT);
        }
        if (root.getName().equals(CALCULATION_MODEL)) {
            Element firstPercent = root.addElement(FIRST_PERCENT);
            xmlConverter.addElementToRoot(firstPercent, FIRST_PERCENT, String.valueOf(calculationModel.isFirstPerCent()));
            xmlConverter.printResults(firstPercent);
        }
    }

    public static void addCalculationDetailsElement(@NotNull Element root, @NotNull CalculationModel calculationModel) {
        if (root.getName() == null) {
            throw new IllegalArgumentException(WRONG_CONSTRUCTOR_ARGUMENT);
        }
        if (root.getName().equals(CALCULATION_MODEL)) {
            CalculationModelDetail calculationModelDetail = calculationModel.getCalculationModelDetail();
            Element details = CalculationModelDetail.toXml(calculationModelDetail);
            root.add(details);
        }
    }

    public CalculationModel parse(@NotNull Element element) {
        if (element.getName() == null) {
            throw new IllegalArgumentException(WRONG_CONSTRUCTOR_ARGUMENT);
        }
        if (element.getName().equals(CALCULATION_MODEL)) {
            CalculationModel calculationModel = new CalculationModel();
            CalculationModelDetail modelDetail = CalculationModelDetail.parse(element);
            CalculationModelDetailList calculationModelDetails = new CalculationModelDetailList();
            calculationModelDetails.add(modelDetail);
            calculationModel.setCalculationModelDetailList(calculationModelDetails);

            String firstPercent = xmlConverter.parse(element, FIRST_PERCENT);
            calculationModel.setFirstPerCent(firstPercent != null && firstPercent.equals("true"));

            return calculationModel;
        }
        return null;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CalculationModel)) return false;
        CalculationModel that = (CalculationModel) o;
        return isFirstPerCent() == that.isFirstPerCent() && Objects.equals(getCalculationModelDetail(), that.getCalculationModelDetail());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCalculationModelDetail(), isFirstPerCent());
    }

    @Override
    public String toString() {
        return "CalculationModel{" +
                "calculationModelDetail="
                + (getCalculationModelDetail() == null ? NULL_STR : getCalculationModelDetail().toString()) +
                ", firstPerCent=" + isFirstPerCent() +
                '}';
    }
}
